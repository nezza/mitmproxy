#!/usr/bin/env python

# Copyright (C) 2010  Aldo Cortesi
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys, os.path
from libmproxy import proxy, controller, console, utils
from optparse import OptionParser, OptionGroup
from cfgopter import cfgopter


if __name__ == '__main__':
    cfgopt = cfgopter()
    cfgopt.load('config.ini')
    cfg = cfgopt.get_config()
    cfgopt.add_opt(short_opt="-c", long_opt="--cert", section=cfg.main,
                   option = "cert", label="CERT", help="SSL certificate file.")
    cfgopt.add_opt(short_opt="-p", long_opt="--port", section=cfg.main,
                   option="port", label="PORT", help="Port to listen on.")
    cfgopt.add_opt(short_opt="-B", long_opt="--beep", section=cfg.filters,
                   option="beep", label="EXPRESSION", help="Beep filter.")
    cfgopt.add_opt(short_opt="-l", long_opt="--limit", section=cfg.filters,
                   option="limit", label="EXPRESSION", help="Limit filter.")
    cfgopt.add_opt(short_opt="-i", long_opt="--intercept", section=cfg.filters,
                   option="intercept", label="EXPRESSION", help="Intercept filter.")
    cfgopt.add_opt(short_opt="-s", long_opt="--sticky", section=cfg.filters,
                   option="sticky", label="EXPRESSION", help="Sticky cookie filter.")
    cfgopt.parse_args()

    certpath = os.path.expanduser(cfg.main.cert)
    
    if not os.path.exists(certpath):
        print >> sys.stderr, "Creating bogus certificate at %s"%options.cert
        utils.make_bogus_cert(certpath)

    proxy.config = proxy.Config(
        certpath
    )
    server = proxy.ProxyServer(int(cfg.main.port))
    m = console.ConsoleMaster(server, cfg.filters)
    m.run()
